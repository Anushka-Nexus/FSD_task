What is MongoDB?

MongoDB is a NoSQL database.
It is used to store and manage data, but not in tables like traditional SQL databases.
Instead, MongoDB stores data in a flexible, JSON-like format called documents.

Real-Life Example
  Imagine this:
  You are building an online shopping app.
  
  Each user has:
  Name
  Email
  Address
  List of orders
  
  In SQL, you'd create multiple tables:
  
  Users table
  Orders table
  Products table
  Then you'd link them with IDs.
  
  In MongoDB, you can store all this info in one document:
  {
  "name": "Alice",
  "email": "alice@example.com",
  "address": "123 Main St",
  "orders": [
    { "product": "Shirt", "price": 20 },
    { "product": "Shoes", "price": 50 }
  ]
 }
 No need for complex joins â€” everything is together, like a full profile.

Simple Logic Behind MongoDB

  MongoDB stores data as documents (in BSON â€“ binary JSON).
  Documents are stored in collections (like tables in SQL).
  It's schema-less â€” each document can be different!
  It's great for dynamic, changing, or nested data.

Why use MongoDB?

  Flexible: Add or remove fields anytime.
  Fast: Especially with large and complex data.
  Scalable: Easy to grow your database as your app grows.
  Real-time apps: Great for chat apps, shopping apps, IoT, etc.

Real-Time Uses of MongoDB

  E-commerce websites â€“ to store users, orders, products.
  Real-time analytics â€“ like dashboards.
  Mobile apps â€“ flexible data model suits rapid changes.
  IoT â€“ handles large volume of semi-structured data.
  Content management systems (CMS) â€“ flexible content types.

CRUD Operations in MongoDB

  CRUD stands for:
  
  Operation	Meaning	MongoDB Command Example
  C - Create	Insert data	db.users.insertOne({ name: "John", age: 25 })
  R - Read	Get data	db.users.find({ age: 25 })
  U - Update	Change data	db.users.updateOne({ name: "John" }, { $set: { age: 26 } })
  D - Delete	Remove data	db.users.deleteOne({ name: "John" })

Think of db.users as your collection of user documents.


Structure of MongoDB
Hierarchy:
MongoDB Server
â””â”€â”€ Databases
    â””â”€â”€ Collections (like tables)
        â””â”€â”€ Documents (like rows, but JSON-like)

Embedded vs Referenced Data
   Embedded Document (One document holds all info)
   {
     "name": "Ravi",
     "order": {
       "item": "Phone",
       "price": 1000
     }
   }
   
   Referenced (Split into two collections, linked by ID)
   // In users
   { "_id": 1, "name": "Ravi" }
   
   // In orders
   { "user_id": 1, "item": "Phone", "price": 1000 }
   
   
   ðŸ“Œ Use embedded when data is used together.
   ðŸ“Œ Use referenced when data grows big or is reused.

Aggregation

  Think of aggregation as advanced queries (like Excel reports).
  
  Used for:
  Counting
  Grouping
  Filtering
  Summarizing
  
  Example: Count how many users are 25 years old.
  
  db.users.aggregate([
    { $match: { age: 25 } },
    { $count: "total" }
  ])

Tools for MongoDB

   MongoDB Compass â€“ GUI tool to visualize data
   Mongoose â€“ Library to use MongoDB easily with Node.js
   Robo 3T â€“ Another GUI tool
   Mongo Shell / mongosh â€“ Command-line tool

Security in MongoDB

  Use username/password authentication
  Enable access control (limit who can read/write)
  Encrypt sensitive data
  In production, never allow open access to the internet

When to Use MongoDB?

  Best for:
  Changing or unpredictable data structures
  Fast development cycles
  Nested or hierarchical data
  Real-time analytics
  
  Not ideal for:
  Complex transactions across many tables (like banking)
  Strongly relational data (where SQL fits better)


=====NoSQL======

What is NoSQL?

  NoSQL = "Not Only SQL"
  It's a type of database that stores non-tabular data.
  It's used when data is large, unstructured, fast-changing, or complex.

Document-based Structure (e.g., MongoDB)

  Data is stored in documents (like JSON).
  Documents are grouped into collections.
  No fixed schema â€“ flexible structure.

Structure:
Database
â””â”€â”€ Collection (e.g., users)
    â””â”€â”€ Document (JSON-like)

Key-Value Store Structure (e.g., Redis)
  
  Simplest form: Each value is accessed via a unique key.  
  Very fast, used in caching.

What is File-Based Storage?

  File-based storage means storing data in regular files on your system â€” like:
  .txt, .csv, .json, .xml, etc.
  You read/write data using file handling methods.
  No database engine is involved.

What is NoSQL?

  NoSQL is a non-relational database system that stores data in a structured yet flexible format (like documents, key-values, etc.).
  MongoDB is an example (stores JSON-like documents).
  You interact using database queries, not raw file I/O.
  It has built-in features like indexing, searching, and scaling.

Key Differences: File-Based vs NoSQL
Feature	                         File-Based Storage	                            NoSQL Database (e.g. MongoDB)
Data Format	                   Plain text files (CSV, JSON, XML)	            Structured documents (BSON, JSON)
Access Method	               Manual file handling (read/write)	             Query language (like MongoDB queries)
Performance (Large Data)   	    Slower as file grows	                         Optimized for large datasets
Search Capability	             Must scan entire file (slow)               	 Fast queries with indexes
Schema	                      No schema enforcement	                             Schema-less but structured
Data Integrity	                Hard to maintain manually	                     Built-in validation & atomic operations
Concurrency                	Difficult to manage multiple users	                 Supports concurrent access safely
Backup/Restore                       	Manual file copy	                      Built-in tools for backup/restore
Scalability	                 Limited (depends on file system)	                  Highly scalable (sharding, clustering)
Use Cases	                       Simple apps, config files	                   Web apps, real-time systems, large data
   

When to Use What?

    Use File-Based Storage if:
    You have small data
    You don't need complex querying
    You're building simple apps, logs, configs
    You're okay with manual file I/O


    Use NoSQL if:
    You have growing or complex data
    You need fast access, search, or analytics
    You want real-time applications (chat, IoT, etc.)
    You need reliable multi-user access
   



